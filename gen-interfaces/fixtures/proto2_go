// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

/*
	Package horse is a generated protocol buffer package.

	It is generated from these files:
		proto.proto

	It has these top-level messages:
		HorseImage
		Horses
		HorseList
		HorseSharingList
		HorseSharingRequest
		HorseSharing
		FoodDosage
		Horse
*/
package horse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/flowup/monet-equimo/core"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HorseSharingPermission int32

const (
	HorseSharingPermission_NONE      HorseSharingPermission = 0
	HorseSharingPermission_OWNER     HorseSharingPermission = 1
	HorseSharingPermission_WRITE     HorseSharingPermission = 2
	HorseSharingPermission_READ      HorseSharingPermission = 3
	HorseSharingPermission_READWRITE HorseSharingPermission = 4
)

var HorseSharingPermission_name = map[int32]string{
	0: "NONE",
	1: "OWNER",
	2: "WRITE",
	3: "READ",
	4: "READWRITE",
}
var HorseSharingPermission_value = map[string]int32{
	"NONE":      0,
	"OWNER":     1,
	"WRITE":     2,
	"READ":      3,
	"READWRITE": 4,
}

func (x HorseSharingPermission) String() string {
	return proto.EnumName(HorseSharingPermission_name, int32(x))
}
func (HorseSharingPermission) EnumDescriptor() ([]byte, []int) { return fileDescriptorProto, []int{0} }

type HorseImage struct {
	HorseID string `protobuf:"bytes,1,opt,name=horseID,proto3" json:"horseID,omitempty"`
	Photo   string `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *HorseImage) Reset()                    { *m = HorseImage{} }
func (m *HorseImage) String() string            { return proto.CompactTextString(m) }
func (*HorseImage) ProtoMessage()               {}
func (*HorseImage) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{0} }

func (m *HorseImage) GetHorseID() string {
	if m != nil {
		return m.HorseID
	}
	return ""
}

func (m *HorseImage) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

type Horses struct {
	Horses []*Horse `protobuf:"bytes,1,rep,name=horses" json:"horses,omitempty"`
}

func (m *Horses) Reset()                    { *m = Horses{} }
func (m *Horses) String() string            { return proto.CompactTextString(m) }
func (*Horses) ProtoMessage()               {}
func (*Horses) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{1} }

func (m *Horses) GetHorses() []*Horse {
	if m != nil {
		return m.Horses
	}
	return nil
}

type HorseList struct {
	*core.Paging `protobuf:"bytes,1,opt,name=paging,embedded=paging" json:""`
	Data         []*Horse `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *HorseList) Reset()                    { *m = HorseList{} }
func (m *HorseList) String() string            { return proto.CompactTextString(m) }
func (*HorseList) ProtoMessage()               {}
func (*HorseList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{2} }

func (m *HorseList) GetData() []*Horse {
	if m != nil {
		return m.Data
	}
	return nil
}

type HorseSharingList struct {
	Data []*HorseSharing `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *HorseSharingList) Reset()                    { *m = HorseSharingList{} }
func (m *HorseSharingList) String() string            { return proto.CompactTextString(m) }
func (*HorseSharingList) ProtoMessage()               {}
func (*HorseSharingList) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{3} }

func (m *HorseSharingList) GetData() []*HorseSharing {
	if m != nil {
		return m.Data
	}
	return nil
}

type HorseSharingRequest struct {
	Email                  string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	HorseID                string                 `protobuf:"bytes,2,opt,name=horseID,proto3" json:"horseID,omitempty"`
	HorseSharingPermission HorseSharingPermission `protobuf:"varint,3,opt,name=horseSharingPermission,proto3,enum=horse.HorseSharingPermission" json:"horseSharingPermission,omitempty"`
}

func (m *HorseSharingRequest) Reset()                    { *m = HorseSharingRequest{} }
func (m *HorseSharingRequest) String() string            { return proto.CompactTextString(m) }
func (*HorseSharingRequest) ProtoMessage()               {}
func (*HorseSharingRequest) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{4} }

func (m *HorseSharingRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *HorseSharingRequest) GetHorseID() string {
	if m != nil {
		return m.HorseID
	}
	return ""
}

func (m *HorseSharingRequest) GetHorseSharingPermission() HorseSharingPermission {
	if m != nil {
		return m.HorseSharingPermission
	}
	return HorseSharingPermission_NONE
}

type HorseSharing struct {
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	HorseID        string                 `protobuf:"bytes,2,opt,name=horseID,proto3" json:"horseID,omitempty" gorm:"unique_index:horse_user_id"`
	UserID         string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty" gorm:"unique_index:horse_user_id"`
	FirstName      string                 `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty" sql:"-"`
	LastName       string                 `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty" sql:"-"`
	Avatar         string                 `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty" sql:"-"`
	Permission     HorseSharingPermission `protobuf:"varint,7,opt,name=permission,proto3,enum=horse.HorseSharingPermission" json:"permission,omitempty"`
	core.Timestamp `protobuf:"bytes,30,opt,name=timestamp,embedded=timestamp" json:""`
}

func (m *HorseSharing) Reset()                    { *m = HorseSharing{} }
func (m *HorseSharing) String() string            { return proto.CompactTextString(m) }
func (*HorseSharing) ProtoMessage()               {}
func (*HorseSharing) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{5} }

func (m *HorseSharing) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HorseSharing) GetHorseID() string {
	if m != nil {
		return m.HorseID
	}
	return ""
}

func (m *HorseSharing) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *HorseSharing) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *HorseSharing) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *HorseSharing) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *HorseSharing) GetPermission() HorseSharingPermission {
	if m != nil {
		return m.Permission
	}
	return HorseSharingPermission_NONE
}

type FoodDosage struct {
	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	Title          string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Amount         int32    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Type           string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	HorseID        string   `protobuf:"bytes,5,opt,name=horseID,proto3" json:"-"`
	Note           string   `protobuf:"bytes,6,opt,name=note,proto3" json:"-"`
	Notes          []string `protobuf:"bytes,7,rep,name=notes" json:"notes,omitempty" sql:"-"`
	core.Timestamp `protobuf:"bytes,30,opt,name=timestamp,embedded=timestamp" json:""`
}

func (m *FoodDosage) Reset()                    { *m = FoodDosage{} }
func (m *FoodDosage) String() string            { return proto.CompactTextString(m) }
func (*FoodDosage) ProtoMessage()               {}
func (*FoodDosage) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{6} }

func (m *FoodDosage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FoodDosage) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FoodDosage) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FoodDosage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FoodDosage) GetHorseID() string {
	if m != nil {
		return m.HorseID
	}
	return ""
}

func (m *FoodDosage) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *FoodDosage) GetNotes() []string {
	if m != nil {
		return m.Notes
	}
	return nil
}

type Horse struct {
	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FeiId          string          `protobuf:"bytes,4,opt,name=feiId,proto3" json:"feiId,omitempty"`
	Ueln           string          `protobuf:"bytes,5,opt,name=ueln,proto3" json:"ueln,omitempty"`
	ChipId         string          `protobuf:"bytes,6,opt,name=chipId,proto3" json:"chipId,omitempty"`
	Breed          string          `protobuf:"bytes,7,opt,name=breed,proto3" json:"breed,omitempty"`
	Height         float64         `protobuf:"fixed64,8,opt,name=height,proto3" json:"height,omitempty"`
	Length         float64         `protobuf:"fixed64,9,opt,name=length,proto3" json:"length,omitempty"`
	Girth          float64         `protobuf:"fixed64,10,opt,name=girth,proto3" json:"girth,omitempty"`
	Sex            string          `protobuf:"bytes,12,opt,name=sex,proto3" json:"sex,omitempty"`
	Weight         float64         `protobuf:"fixed64,13,opt,name=weight,proto3" json:"weight,omitempty"`
	Origin         string          `protobuf:"bytes,14,opt,name=origin,proto3" json:"origin,omitempty"`
	Color          string          `protobuf:"bytes,15,opt,name=color,proto3" json:"color,omitempty"`
	Breeder        string          `protobuf:"bytes,16,opt,name=breeder,proto3" json:"breeder,omitempty"`
	Photo          string          `protobuf:"bytes,17,opt,name=photo,proto3" json:"photo,omitempty"`
	BirthDate      string          `protobuf:"bytes,18,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	Pedigree       string          `protobuf:"bytes,19,opt,name=pedigree,proto3" json:"pedigree,omitempty"`
	NationalId     string          `protobuf:"bytes,20,opt,name=nationalId,proto3" json:"nationalId,omitempty"`
	License        string          `protobuf:"bytes,21,opt,name=license,proto3" json:"license,omitempty"`
	FatherID       string          `protobuf:"bytes,22,opt,name=fatherID,proto3" json:"-"`
	MotherID       string          `protobuf:"bytes,23,opt,name=motherID,proto3" json:"-"`
	Mother         *Horse          `protobuf:"bytes,27,opt,name=mother" json:"mother,omitempty" sql:"-"`
	Father         *Horse          `protobuf:"bytes,28,opt,name=father" json:"father,omitempty" sql:"-"`
	Sharings       []*HorseSharing `protobuf:"bytes,24,rep,name=sharings" json:"sharings,omitempty" gorm:"ForeignKey:HorseID"`
	FoodDosages    []*FoodDosage   `protobuf:"bytes,26,rep,name=foodDosages" json:"foodDosages,omitempty" gorm:"ForeignKey:HorseID"`
	core.Timestamp `protobuf:"bytes,30,opt,name=timestamp,embedded=timestamp" json:""`
}

func (m *Horse) Reset()                    { *m = Horse{} }
func (m *Horse) String() string            { return proto.CompactTextString(m) }
func (*Horse) ProtoMessage()               {}
func (*Horse) Descriptor() ([]byte, []int) { return fileDescriptorProto, []int{7} }

func (m *Horse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Horse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Horse) GetFeiId() string {
	if m != nil {
		return m.FeiId
	}
	return ""
}

func (m *Horse) GetUeln() string {
	if m != nil {
		return m.Ueln
	}
	return ""
}

func (m *Horse) GetChipId() string {
	if m != nil {
		return m.ChipId
	}
	return ""
}

func (m *Horse) GetBreed() string {
	if m != nil {
		return m.Breed
	}
	return ""
}

func (m *Horse) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Horse) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Horse) GetGirth() float64 {
	if m != nil {
		return m.Girth
	}
	return 0
}

func (m *Horse) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *Horse) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Horse) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *Horse) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Horse) GetBreeder() string {
	if m != nil {
		return m.Breeder
	}
	return ""
}

func (m *Horse) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *Horse) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Horse) GetPedigree() string {
	if m != nil {
		return m.Pedigree
	}
	return ""
}

func (m *Horse) GetNationalId() string {
	if m != nil {
		return m.NationalId
	}
	return ""
}

func (m *Horse) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Horse) GetFatherID() string {
	if m != nil {
		return m.FatherID
	}
	return ""
}

func (m *Horse) GetMotherID() string {
	if m != nil {
		return m.MotherID
	}
	return ""
}

func (m *Horse) GetMother() *Horse {
	if m != nil {
		return m.Mother
	}
	return nil
}

func (m *Horse) GetFather() *Horse {
	if m != nil {
		return m.Father
	}
	return nil
}

func (m *Horse) GetSharings() []*HorseSharing {
	if m != nil {
		return m.Sharings
	}
	return nil
}

func (m *Horse) GetFoodDosages() []*FoodDosage {
	if m != nil {
		return m.FoodDosages
	}
	return nil
}

func init() {
	proto.RegisterType((*HorseImage)(nil), "horse.HorseImage")
	proto.RegisterType((*Horses)(nil), "horse.Horses")
	proto.RegisterType((*HorseList)(nil), "horse.HorseList")
	proto.RegisterType((*HorseSharingList)(nil), "horse.HorseSharingList")
	proto.RegisterType((*HorseSharingRequest)(nil), "horse.HorseSharingRequest")
	proto.RegisterType((*HorseSharing)(nil), "horse.HorseSharing")
	proto.RegisterType((*FoodDosage)(nil), "horse.FoodDosage")
	proto.RegisterType((*Horse)(nil), "horse.Horse")
	proto.RegisterEnum("horse.HorseSharingPermission", HorseSharingPermission_name, HorseSharingPermission_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HorseService service

type HorseServiceClient interface {
	SyncHorses(ctx context.Context, in *Horses, opts ...grpc.CallOption) (*Horses, error)
	ListHorses(ctx context.Context, in *HorseList, opts ...grpc.CallOption) (*HorseList, error)
	GetHorse(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*Horse, error)
	GetHorseFromFEI(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*Horse, error)
	CreateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error)
	UpdateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error)
	DeleteHorse(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreateHorseSharing(ctx context.Context, in *HorseSharingRequest, opts ...grpc.CallOption) (*HorseSharing, error)
	GetHorseSharingByHorseID(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*HorseSharingList, error)
	GetHorseSharingByUserID(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*HorseSharingList, error)
	DeleteHorseSharing(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetAllHorseSharings(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*HorseSharingList, error)
	ValidateHorse(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	SaveImage(ctx context.Context, in *HorseImage, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ValidateHorseSharing(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type horseServiceClient struct {
	cc *grpc.ClientConn
}

func NewHorseServiceClient(cc *grpc.ClientConn) HorseServiceClient {
	return &horseServiceClient{cc}
}

func (c *horseServiceClient) SyncHorses(ctx context.Context, in *Horses, opts ...grpc.CallOption) (*Horses, error) {
	out := new(Horses)
	err := grpc.Invoke(ctx, "/horse.HorseService/SyncHorses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ListHorses(ctx context.Context, in *HorseList, opts ...grpc.CallOption) (*HorseList, error) {
	out := new(HorseList)
	err := grpc.Invoke(ctx, "/horse.HorseService/ListHorses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetHorse(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetHorseFromFEI(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetHorseFromFEI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) CreateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/CreateHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) UpdateHorse(ctx context.Context, in *Horse, opts ...grpc.CallOption) (*Horse, error) {
	out := new(Horse)
	err := grpc.Invoke(ctx, "/horse.HorseService/UpdateHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) DeleteHorse(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/DeleteHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) CreateHorseSharing(ctx context.Context, in *HorseSharingRequest, opts ...grpc.CallOption) (*HorseSharing, error) {
	out := new(HorseSharing)
	err := grpc.Invoke(ctx, "/horse.HorseService/CreateHorseSharing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetHorseSharingByHorseID(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*HorseSharingList, error) {
	out := new(HorseSharingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetHorseSharingByHorseID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetHorseSharingByUserID(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*HorseSharingList, error) {
	out := new(HorseSharingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetHorseSharingByUserID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) DeleteHorseSharing(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/DeleteHorseSharing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) GetAllHorseSharings(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*HorseSharingList, error) {
	out := new(HorseSharingList)
	err := grpc.Invoke(ctx, "/horse.HorseService/GetAllHorseSharings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ValidateHorse(ctx context.Context, in *core.IDMessage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/ValidateHorse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) SaveImage(ctx context.Context, in *HorseImage, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/SaveImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *horseServiceClient) ValidateHorseSharing(ctx context.Context, in *HorseSharing, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/horse.HorseService/ValidateHorseSharing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HorseService service

type HorseServiceServer interface {
	SyncHorses(context.Context, *Horses) (*Horses, error)
	ListHorses(context.Context, *HorseList) (*HorseList, error)
	GetHorse(context.Context, *core.IDMessage) (*Horse, error)
	GetHorseFromFEI(context.Context, *core.IDMessage) (*Horse, error)
	CreateHorse(context.Context, *Horse) (*Horse, error)
	UpdateHorse(context.Context, *Horse) (*Horse, error)
	DeleteHorse(context.Context, *core.IDMessage) (*google_protobuf.Empty, error)
	CreateHorseSharing(context.Context, *HorseSharingRequest) (*HorseSharing, error)
	GetHorseSharingByHorseID(context.Context, *core.IDMessage) (*HorseSharingList, error)
	GetHorseSharingByUserID(context.Context, *core.IDMessage) (*HorseSharingList, error)
	DeleteHorseSharing(context.Context, *HorseSharing) (*google_protobuf.Empty, error)
	GetAllHorseSharings(context.Context, *google_protobuf.Empty) (*HorseSharingList, error)
	ValidateHorse(context.Context, *core.IDMessage) (*google_protobuf.Empty, error)
	SaveImage(context.Context, *HorseImage) (*google_protobuf.Empty, error)
	ValidateHorseSharing(context.Context, *HorseSharing) (*google_protobuf.Empty, error)
}

func RegisterHorseServiceServer(s *grpc.Server, srv HorseServiceServer) {
	s.RegisterService(&_HorseService_serviceDesc, srv)
}

func _HorseService_SyncHorses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Horses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).SyncHorses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/SyncHorses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).SyncHorses(ctx, req.(*Horses))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ListHorses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ListHorses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ListHorses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ListHorses(ctx, req.(*HorseList))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetHorse(ctx, req.(*core.IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetHorseFromFEI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetHorseFromFEI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetHorseFromFEI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetHorseFromFEI(ctx, req.(*core.IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_CreateHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Horse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).CreateHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/CreateHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).CreateHorse(ctx, req.(*Horse))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_UpdateHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Horse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).UpdateHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/UpdateHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).UpdateHorse(ctx, req.(*Horse))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_DeleteHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).DeleteHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/DeleteHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).DeleteHorse(ctx, req.(*core.IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_CreateHorseSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).CreateHorseSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/CreateHorseSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).CreateHorseSharing(ctx, req.(*HorseSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetHorseSharingByHorseID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetHorseSharingByHorseID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetHorseSharingByHorseID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetHorseSharingByHorseID(ctx, req.(*core.IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetHorseSharingByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetHorseSharingByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetHorseSharingByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetHorseSharingByUserID(ctx, req.(*core.IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_DeleteHorseSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseSharing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).DeleteHorseSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/DeleteHorseSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).DeleteHorseSharing(ctx, req.(*HorseSharing))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_GetAllHorseSharings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).GetAllHorseSharings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/GetAllHorseSharings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).GetAllHorseSharings(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ValidateHorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ValidateHorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ValidateHorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ValidateHorse(ctx, req.(*core.IDMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_SaveImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).SaveImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/SaveImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).SaveImage(ctx, req.(*HorseImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HorseService_ValidateHorseSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HorseSharing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HorseServiceServer).ValidateHorseSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/horse.HorseService/ValidateHorseSharing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HorseServiceServer).ValidateHorseSharing(ctx, req.(*HorseSharing))
	}
	return interceptor(ctx, in, info, handler)
}

var _HorseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "horse.HorseService",
	HandlerType: (*HorseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncHorses",
			Handler:    _HorseService_SyncHorses_Handler,
		},
		{
			MethodName: "ListHorses",
			Handler:    _HorseService_ListHorses_Handler,
		},
		{
			MethodName: "GetHorse",
			Handler:    _HorseService_GetHorse_Handler,
		},
		{
			MethodName: "GetHorseFromFEI",
			Handler:    _HorseService_GetHorseFromFEI_Handler,
		},
		{
			MethodName: "CreateHorse",
			Handler:    _HorseService_CreateHorse_Handler,
		},
		{
			MethodName: "UpdateHorse",
			Handler:    _HorseService_UpdateHorse_Handler,
		},
		{
			MethodName: "DeleteHorse",
			Handler:    _HorseService_DeleteHorse_Handler,
		},
		{
			MethodName: "CreateHorseSharing",
			Handler:    _HorseService_CreateHorseSharing_Handler,
		},
		{
			MethodName: "GetHorseSharingByHorseID",
			Handler:    _HorseService_GetHorseSharingByHorseID_Handler,
		},
		{
			MethodName: "GetHorseSharingByUserID",
			Handler:    _HorseService_GetHorseSharingByUserID_Handler,
		},
		{
			MethodName: "DeleteHorseSharing",
			Handler:    _HorseService_DeleteHorseSharing_Handler,
		},
		{
			MethodName: "GetAllHorseSharings",
			Handler:    _HorseService_GetAllHorseSharings_Handler,
		},
		{
			MethodName: "ValidateHorse",
			Handler:    _HorseService_ValidateHorse_Handler,
		},
		{
			MethodName: "SaveImage",
			Handler:    _HorseService_SaveImage_Handler,
		},
		{
			MethodName: "ValidateHorseSharing",
			Handler:    _HorseService_ValidateHorseSharing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}

func (m *HorseImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HorseImage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HorseID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.HorseID)))
		i += copy(dAtA[i:], m.HorseID)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	return i, nil
}

func (m *Horses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Horses) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Horses) > 0 {
		for _, msg := range m.Horses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HorseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HorseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Paging != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Paging.Size()))
		n1, err := m.Paging.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HorseSharingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HorseSharingList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HorseSharingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HorseSharingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.HorseID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.HorseID)))
		i += copy(dAtA[i:], m.HorseID)
	}
	if m.HorseSharingPermission != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.HorseSharingPermission))
	}
	return i, nil
}

func (m *HorseSharing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HorseSharing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.HorseID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.HorseID)))
		i += copy(dAtA[i:], m.HorseID)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.Permission != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Permission))
	}
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintProto(dAtA, i, uint64(m.Timestamp.Size()))
	n2, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *FoodDosage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FoodDosage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Amount))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.HorseID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.HorseID)))
		i += copy(dAtA[i:], m.HorseID)
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if len(m.Notes) > 0 {
		for _, s := range m.Notes {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintProto(dAtA, i, uint64(m.Timestamp.Size()))
	n3, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *Horse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Horse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FeiId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.FeiId)))
		i += copy(dAtA[i:], m.FeiId)
	}
	if len(m.Ueln) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Ueln)))
		i += copy(dAtA[i:], m.Ueln)
	}
	if len(m.ChipId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.ChipId)))
		i += copy(dAtA[i:], m.ChipId)
	}
	if len(m.Breed) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Breed)))
		i += copy(dAtA[i:], m.Breed)
	}
	if m.Height != 0 {
		dAtA[i] = 0x41
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Height))))
		i += 8
	}
	if m.Length != 0 {
		dAtA[i] = 0x49
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Length))))
		i += 8
	}
	if m.Girth != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Girth))))
		i += 8
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x69
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Weight))))
		i += 8
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	if len(m.Breeder) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Breeder)))
		i += copy(dAtA[i:], m.Breeder)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.BirthDate) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.BirthDate)))
		i += copy(dAtA[i:], m.BirthDate)
	}
	if len(m.Pedigree) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Pedigree)))
		i += copy(dAtA[i:], m.Pedigree)
	}
	if len(m.NationalId) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.NationalId)))
		i += copy(dAtA[i:], m.NationalId)
	}
	if len(m.License) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.License)))
		i += copy(dAtA[i:], m.License)
	}
	if len(m.FatherID) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.FatherID)))
		i += copy(dAtA[i:], m.FatherID)
	}
	if len(m.MotherID) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.MotherID)))
		i += copy(dAtA[i:], m.MotherID)
	}
	if len(m.Sharings) > 0 {
		for _, msg := range m.Sharings {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FoodDosages) > 0 {
		for _, msg := range m.FoodDosages {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Mother != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mother.Size()))
		n4, err := m.Mother.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Father != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Father.Size()))
		n5, err := m.Father.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintProto(dAtA, i, uint64(m.Timestamp.Size()))
	n6, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HorseImage) Size() (n int) {
	var l int
	_ = l
	l = len(m.HorseID)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	return n
}

func (m *Horses) Size() (n int) {
	var l int
	_ = l
	if len(m.Horses) > 0 {
		for _, e := range m.Horses {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	return n
}

func (m *HorseList) Size() (n int) {
	var l int
	_ = l
	if m.Paging != nil {
		l = m.Paging.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	return n
}

func (m *HorseSharingList) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	return n
}

func (m *HorseSharingRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.HorseID)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.HorseSharingPermission != 0 {
		n += 1 + sovProto(uint64(m.HorseSharingPermission))
	}
	return n
}

func (m *HorseSharing) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.HorseID)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProto(uint64(m.Permission))
	}
	l = m.Timestamp.Size()
	n += 2 + l + sovProto(uint64(l))
	return n
}

func (m *FoodDosage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovProto(uint64(m.Amount))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.HorseID)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if len(m.Notes) > 0 {
		for _, s := range m.Notes {
			l = len(s)
			n += 1 + l + sovProto(uint64(l))
		}
	}
	l = m.Timestamp.Size()
	n += 2 + l + sovProto(uint64(l))
	return n
}

func (m *Horse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.FeiId)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Ueln)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.ChipId)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Breed)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Height != 0 {
		n += 9
	}
	if m.Length != 0 {
		n += 9
	}
	if m.Girth != 0 {
		n += 9
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Weight != 0 {
		n += 9
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Breeder)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.Pedigree)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.NationalId)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.FatherID)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	l = len(m.MotherID)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	if len(m.Sharings) > 0 {
		for _, e := range m.Sharings {
			l = e.Size()
			n += 2 + l + sovProto(uint64(l))
		}
	}
	if len(m.FoodDosages) > 0 {
		for _, e := range m.FoodDosages {
			l = e.Size()
			n += 2 + l + sovProto(uint64(l))
		}
	}
	if m.Mother != nil {
		l = m.Mother.Size()
		n += 2 + l + sovProto(uint64(l))
	}
	if m.Father != nil {
		l = m.Father.Size()
		n += 2 + l + sovProto(uint64(l))
	}
	l = m.Timestamp.Size()
	n += 2 + l + sovProto(uint64(l))
	return n
}

func sovProto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HorseImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HorseImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HorseImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HorseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Horses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Horses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Horses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Horses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Horses = append(m.Horses, &Horse{})
			if err := m.Horses[len(m.Horses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HorseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HorseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HorseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paging == nil {
				m.Paging = &core.Paging{}
			}
			if err := m.Paging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Horse{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HorseSharingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HorseSharingList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HorseSharingList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &HorseSharing{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HorseSharingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HorseSharingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HorseSharingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HorseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorseSharingPermission", wireType)
			}
			m.HorseSharingPermission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HorseSharingPermission |= (HorseSharingPermission(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HorseSharing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HorseSharing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HorseSharing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HorseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= (HorseSharingPermission(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FoodDosage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FoodDosage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FoodDosage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HorseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HorseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = append(m.Notes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Horse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Horse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Horse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeiId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeiId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ueln", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ueln = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChipId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChipId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Breed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Height = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Length = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Girth", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Girth = float64(math.Float64frombits(v))
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Weight = float64(math.Float64frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Breeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pedigree", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pedigree = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NationalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NationalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FatherID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FatherID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MotherID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MotherID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sharings = append(m.Sharings, &HorseSharing{})
			if err := m.Sharings[len(m.Sharings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodDosages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoodDosages = append(m.FoodDosages, &FoodDosage{})
			if err := m.FoodDosages[len(m.FoodDosages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mother", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mother == nil {
				m.Mother = &Horse{}
			}
			if err := m.Mother.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Father", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Father == nil {
				m.Father = &Horse{}
			}
			if err := m.Father.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto.proto", fileDescriptorProto) }

var fileDescriptorProto = []byte{
	// 1327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0xf6, 0x3a, 0xb1, 0x63, 0x1f, 0x27, 0x8d, 0x3b, 0x49, 0x9d, 0x89, 0xdb, 0xc6, 0xee, 0xfe,
	0xfa, 0xa3, 0x21, 0x55, 0x6c, 0x11, 0x24, 0x84, 0x52, 0x2a, 0x54, 0x63, 0xa7, 0x58, 0x40, 0x5a,
	0xb6, 0x2d, 0x95, 0x90, 0xaa, 0x68, 0xe3, 0x1d, 0xaf, 0x47, 0xec, 0xee, 0x38, 0xbb, 0xe3, 0xb6,
	0x16, 0xe2, 0x86, 0x47, 0x80, 0x1b, 0x2e, 0x78, 0x03, 0x1e, 0x81, 0x17, 0xe8, 0x65, 0x25, 0xee,
	0x2d, 0x54, 0xb8, 0xea, 0x65, 0x9e, 0x00, 0xcd, 0x9f, 0xb5, 0xd7, 0x8d, 0x43, 0x2d, 0x7a, 0x93,
	0xcc, 0x39, 0xe7, 0x3b, 0xdf, 0x39, 0xf3, 0xcd, 0x9f, 0x1d, 0x43, 0xa1, 0x1f, 0x32, 0xce, 0x6a,
	0xf2, 0x2f, 0xca, 0xf4, 0x58, 0x18, 0x91, 0xf2, 0x65, 0x97, 0x31, 0xd7, 0x23, 0x75, 0xe9, 0x3c,
	0x1e, 0x74, 0xeb, 0xc4, 0xef, 0xf3, 0xa1, 0xc2, 0x94, 0xaf, 0xe8, 0xa0, 0xdd, 0xa7, 0x75, 0x3b,
	0x08, 0x18, 0xb7, 0x39, 0x65, 0x41, 0xa4, 0xa3, 0xbb, 0x2e, 0xe5, 0xbd, 0xc1, 0x71, 0xad, 0xc3,
	0xfc, 0xba, 0xcb, 0x5c, 0x36, 0xe1, 0x10, 0x96, 0x34, 0xe4, 0x48, 0xc3, 0x37, 0x3b, 0x2c, 0x4c,
	0xd4, 0x49, 0xf4, 0x62, 0x7e, 0x02, 0xf0, 0xb9, 0xe8, 0xa6, 0xed, 0xdb, 0x2e, 0x41, 0x18, 0x96,
	0x64, 0x6f, 0xed, 0x26, 0x36, 0xaa, 0xc6, 0x76, 0xde, 0x8a, 0x4d, 0xb4, 0x0e, 0x99, 0x7e, 0x8f,
	0x71, 0x86, 0xd3, 0xd2, 0xaf, 0x0c, 0xb3, 0x06, 0x59, 0x99, 0x1d, 0xa1, 0xeb, 0x90, 0x95, 0xd0,
	0x08, 0x1b, 0xd5, 0x85, 0xed, 0xc2, 0xde, 0x72, 0x4d, 0x9a, 0x35, 0x19, 0xb6, 0x74, 0xcc, 0x7c,
	0x02, 0x79, 0xe9, 0xf8, 0x92, 0x46, 0x1c, 0xd5, 0x20, 0xdb, 0xb7, 0x5d, 0x1a, 0xb8, 0xb2, 0x96,
	0x48, 0x11, 0x6d, 0xd6, 0xee, 0x4b, 0x5f, 0x23, 0xf7, 0x72, 0x54, 0x31, 0x5e, 0x8f, 0x2a, 0x29,
	0x4b, 0xa3, 0x50, 0x15, 0x16, 0x1d, 0x9b, 0xdb, 0x38, 0x3d, 0xa3, 0x80, 0x8c, 0x98, 0xb7, 0xa0,
	0x28, 0xcd, 0x07, 0x3d, 0x3b, 0xa4, 0x81, 0x2b, 0xab, 0xdc, 0xd0, 0x59, 0xaa, 0xad, 0xb5, 0x64,
	0x96, 0x86, 0xe9, 0xe4, 0x5f, 0x0d, 0x58, 0x9b, 0x72, 0x93, 0x93, 0x01, 0x89, 0xb8, 0x98, 0x39,
	0xf1, 0x6d, 0xea, 0x69, 0x45, 0x94, 0x91, 0x54, 0x2a, 0x3d, 0xad, 0xd4, 0x23, 0x28, 0xf5, 0x12,
	0x34, 0xf7, 0x49, 0xe8, 0xd3, 0x28, 0xa2, 0x2c, 0xc0, 0x0b, 0x55, 0x63, 0xfb, 0xc2, 0xde, 0xd5,
	0x19, 0x2d, 0x4c, 0x40, 0xd6, 0x39, 0xc9, 0xe6, 0x6f, 0x0b, 0xb0, 0x9c, 0x4c, 0x41, 0xef, 0x41,
	0x9a, 0x3a, 0xaa, 0xa9, 0x46, 0xe9, 0x74, 0x54, 0x41, 0x2e, 0x0b, 0xfd, 0x7d, 0xb3, 0x1f, 0x52,
	0xdf, 0x0e, 0x87, 0x47, 0xdf, 0x91, 0xa1, 0x69, 0xa5, 0xa9, 0x83, 0x3e, 0x7d, 0xa3, 0xd3, 0xc6,
	0xff, 0x4f, 0x47, 0x95, 0x6b, 0x0a, 0x3c, 0x08, 0xe8, 0xc9, 0x80, 0x1c, 0xd1, 0xc0, 0x21, 0xcf,
	0xf7, 0x25, 0xea, 0x68, 0x10, 0x91, 0xf0, 0x88, 0x3a, 0xe6, 0x64, 0x42, 0xb7, 0x21, 0x2b, 0x9c,
	0xed, 0xa6, 0x9c, 0xc0, 0xdc, 0xf9, 0x3a, 0x09, 0xbd, 0x0f, 0xf9, 0x2e, 0x0d, 0x23, 0x7e, 0x68,
	0xfb, 0x04, 0x2f, 0x4a, 0x86, 0xc2, 0xe9, 0xa8, 0xb2, 0x14, 0x9d, 0x78, 0xfb, 0xe6, 0xae, 0x69,
	0x4d, 0xa2, 0xe8, 0x06, 0xe4, 0x3c, 0x5b, 0x23, 0x33, 0x67, 0x91, 0xe3, 0x20, 0xfa, 0x1f, 0x64,
	0xed, 0xa7, 0x36, 0xb7, 0x43, 0x9c, 0x3d, 0x0b, 0xd3, 0x21, 0x74, 0x1b, 0xa0, 0x3f, 0x11, 0x7f,
	0x69, 0x1e, 0xf1, 0x13, 0x09, 0xe8, 0x16, 0xe4, 0x39, 0xf5, 0x49, 0xc4, 0x6d, 0xbf, 0x8f, 0xb7,
	0xe4, 0x0e, 0x5d, 0x55, 0x3b, 0xf4, 0x61, 0xec, 0x6e, 0x2c, 0xbf, 0x18, 0x55, 0x52, 0xe3, 0x8d,
	0x3a, 0xc1, 0x9b, 0x3f, 0xa5, 0x01, 0x0e, 0x18, 0x73, 0x9a, 0x2c, 0x12, 0xe7, 0x6a, 0xde, 0xb5,
	0x5a, 0x87, 0x0c, 0xa7, 0xdc, 0x23, 0xf1, 0x29, 0x93, 0x06, 0x2a, 0x41, 0xd6, 0xf6, 0xd9, 0x20,
	0xe0, 0x72, 0x01, 0x32, 0x96, 0xb6, 0x10, 0x82, 0x45, 0x3e, 0xec, 0x6b, 0x51, 0x2d, 0x39, 0x46,
	0x95, 0xc9, 0x6a, 0x2b, 0x05, 0x33, 0xaf, 0x47, 0x15, 0x63, 0x77, 0xb2, 0x9a, 0x9b, 0xb0, 0x18,
	0x30, 0x4e, 0xb4, 0x70, 0x3a, 0x2a, 0x5d, 0xe8, 0x1a, 0x64, 0xc4, 0xff, 0x08, 0x2f, 0x55, 0x17,
	0xde, 0x14, 0x55, 0x45, 0xde, 0x4d, 0x94, 0xd7, 0x59, 0xc8, 0x48, 0xe1, 0xe7, 0xd6, 0x03, 0xc1,
	0x62, 0x20, 0x36, 0x83, 0x92, 0x43, 0x8e, 0x85, 0x46, 0x5d, 0x42, 0xdb, 0x8e, 0x9e, 0xb6, 0x32,
	0x04, 0x72, 0x40, 0xbc, 0x40, 0x4d, 0xda, 0x92, 0x63, 0xa1, 0x5b, 0xa7, 0x47, 0xfb, 0x6d, 0x47,
	0x4d, 0xd6, 0xd2, 0x96, 0x60, 0x38, 0x0e, 0x09, 0x71, 0xe4, 0x9e, 0xc8, 0x5b, 0xca, 0x10, 0xe8,
	0x1e, 0xa1, 0x6e, 0x8f, 0xe3, 0x5c, 0xd5, 0xd8, 0x36, 0x2c, 0x6d, 0x09, 0xbf, 0x47, 0x02, 0x97,
	0xf7, 0x70, 0x5e, 0xf9, 0x95, 0x25, 0x58, 0x5c, 0x1a, 0xf2, 0x1e, 0x06, 0xe9, 0x56, 0x06, 0x2a,
	0xc2, 0x42, 0x44, 0x9e, 0xe3, 0x65, 0xc9, 0x2c, 0x86, 0x22, 0xff, 0x99, 0xe2, 0x5d, 0x51, 0xf9,
	0xcf, 0xc6, 0xbc, 0x2c, 0xa4, 0x2e, 0x0d, 0xf0, 0x05, 0xd5, 0x9d, 0xb2, 0x04, 0x6f, 0x87, 0x79,
	0x2c, 0xc4, 0xab, 0xaa, 0x3b, 0x69, 0x88, 0xfb, 0x46, 0xb6, 0x49, 0x42, 0x5c, 0x54, 0xf7, 0x8d,
	0x36, 0x27, 0x37, 0xf3, 0xc5, 0xc4, 0xcd, 0x8c, 0xae, 0x40, 0xfe, 0x58, 0x34, 0xd4, 0xb4, 0x39,
	0xc1, 0x48, 0x46, 0x26, 0x0e, 0x54, 0x86, 0x5c, 0x9f, 0x38, 0xd4, 0x0d, 0x09, 0xc1, 0x6b, 0x32,
	0x38, 0xb6, 0xd1, 0x16, 0x40, 0x20, 0x3f, 0x36, 0xb6, 0xd7, 0x76, 0xf0, 0xba, 0x8c, 0x26, 0x3c,
	0xa2, 0x13, 0x8f, 0x76, 0x48, 0x10, 0x11, 0x7c, 0x49, 0x75, 0xa2, 0x4d, 0x74, 0x0d, 0x72, 0x5d,
	0x9b, 0xf7, 0xe4, 0x55, 0x51, 0x4a, 0x6e, 0xaf, 0xb1, 0x5b, 0x40, 0x7c, 0xa6, 0x21, 0x1b, 0x53,
	0x90, 0xd8, 0x8d, 0x0e, 0x21, 0x17, 0xa9, 0x83, 0x19, 0x61, 0x7c, 0xee, 0xa5, 0xdd, 0xb8, 0x7a,
	0x3a, 0xaa, 0x6c, 0xaa, 0x6d, 0x73, 0xc0, 0x42, 0x42, 0xdd, 0xe0, 0x0b, 0x32, 0xdc, 0x57, 0xdf,
	0xb2, 0xa6, 0x69, 0x8d, 0x39, 0x90, 0x05, 0x85, 0xee, 0xf8, 0x24, 0x46, 0xb8, 0x2c, 0x29, 0x2f,
	0x6a, 0xca, 0xc9, 0x19, 0x7d, 0x1b, 0x61, 0x92, 0x04, 0x7d, 0x00, 0x59, 0xd5, 0x2f, 0xbe, 0xac,
	0x3f, 0x5d, 0x89, 0x0e, 0xdf, 0xb8, 0x8d, 0x14, 0x50, 0xa4, 0x28, 0x15, 0xf0, 0x95, 0xb7, 0xa6,
	0x28, 0xe0, 0x3b, 0x1d, 0xb6, 0x9d, 0xaf, 0xa1, 0x34, 0xfb, 0x92, 0x43, 0x39, 0x58, 0x3c, 0xbc,
	0x77, 0xd8, 0x2a, 0xa6, 0x50, 0x1e, 0x32, 0xf7, 0x1e, 0x1f, 0xb6, 0xac, 0xa2, 0x21, 0x86, 0x8f,
	0xad, 0xf6, 0xc3, 0x56, 0x31, 0x2d, 0xe2, 0x56, 0xeb, 0x4e, 0xb3, 0xb8, 0x80, 0x56, 0x20, 0x2f,
	0x46, 0x2a, 0xb0, 0xb8, 0xf7, 0x7b, 0x2e, 0xfe, 0x04, 0x91, 0xf0, 0x29, 0xed, 0x10, 0xd4, 0x00,
	0x78, 0x30, 0x0c, 0x3a, 0xfa, 0x09, 0xb0, 0x92, 0x9c, 0x51, 0x54, 0x9e, 0x36, 0xcd, 0xd2, 0x8f,
	0x7f, 0xfc, 0xfd, 0x73, 0xba, 0x68, 0x16, 0xea, 0xd2, 0x5d, 0x8f, 0x86, 0x41, 0x67, 0xdf, 0xd8,
	0x41, 0x7b, 0x00, 0xe2, 0x3b, 0xad, 0x39, 0x8a, 0xc9, 0x24, 0xe1, 0x2f, 0x9f, 0xf1, 0x98, 0x29,
	0x74, 0x13, 0x72, 0x77, 0x89, 0x4a, 0x41, 0x5a, 0x91, 0x76, 0xf3, 0x2b, 0x12, 0x89, 0xc5, 0x29,
	0x4f, 0x09, 0x6b, 0xa6, 0xd0, 0x1e, 0xac, 0xc6, 0xe0, 0x83, 0x90, 0xf9, 0x07, 0xad, 0xf6, 0xdb,
	0x73, 0x6e, 0x42, 0xe1, 0xb3, 0x90, 0xd8, 0x9c, 0xa8, 0x1a, 0x53, 0xe1, 0x59, 0xe0, 0x47, 0x7d,
	0x67, 0x4e, 0xf0, 0x21, 0x14, 0x9a, 0xc4, 0x23, 0x31, 0xf8, 0x4c, 0x27, 0xa5, 0x9a, 0x7a, 0xf8,
	0xd5, 0xe2, 0xd7, 0x5a, 0xad, 0x25, 0x5e, 0x85, 0xb1, 0x7c, 0x3b, 0x17, 0xb4, 0x7c, 0xd4, 0xa9,
	0x7f, 0x4f, 0x9d, 0x1f, 0xd0, 0x11, 0xa0, 0x44, 0xa7, 0xf1, 0xdb, 0xa0, 0x3c, 0xeb, 0x99, 0xa3,
	0xde, 0x33, 0xe5, 0x59, 0xa7, 0xc9, 0xc4, 0x92, 0x1e, 0x99, 0x2b, 0x9a, 0xde, 0xee, 0x74, 0x48,
	0x14, 0x89, 0xf5, 0xe9, 0x02, 0x8e, 0xe5, 0x8b, 0x8f, 0xde, 0x50, 0x1f, 0x8a, 0xb3, 0xdd, 0x6f,
	0xcc, 0xe0, 0x96, 0x6b, 0x56, 0x95, 0xfc, 0x65, 0x84, 0xa7, 0xf8, 0xb5, 0x21, 0x27, 0xe2, 0xc0,
	0xc6, 0x99, 0x3a, 0x8f, 0xd4, 0x0b, 0x62, 0xfe, 0x32, 0x15, 0x59, 0x66, 0x13, 0x6d, 0x4c, 0x97,
	0x11, 0x2f, 0x11, 0x55, 0xe5, 0x09, 0xa0, 0x84, 0xfc, 0xb1, 0x5c, 0xb3, 0x24, 0x39, 0x77, 0x25,
	0xca, 0xb2, 0xc6, 0xfa, 0x0e, 0x9a, 0xae, 0xa1, 0xe9, 0xd7, 0xee, 0x12, 0x7e, 0xc7, 0xf3, 0x92,
	0x4c, 0x11, 0x3a, 0x87, 0xea, 0xfc, 0x79, 0x5c, 0x92, 0x35, 0x56, 0xd1, 0xf4, 0x72, 0xa0, 0x7d,
	0x58, 0xf9, 0xc6, 0xf6, 0xe8, 0x64, 0xaf, 0xcd, 0xbd, 0x7d, 0x52, 0xe8, 0x63, 0xc8, 0x3f, 0xb0,
	0x9f, 0xea, 0x77, 0xfe, 0xc5, 0x64, 0x61, 0xe9, 0xfa, 0x97, 0xcc, 0x16, 0xac, 0x4f, 0x55, 0xfd,
	0x4f, 0xaa, 0xa5, 0x1a, 0x1f, 0xbd, 0x78, 0xb5, 0x65, 0xbc, 0x7c, 0xb5, 0x65, 0xfc, 0xf9, 0x6a,
	0xcb, 0xf8, 0xe5, 0xaf, 0xad, 0xd4, 0xb7, 0xd7, 0x13, 0xbf, 0x62, 0xba, 0x1e, 0x7b, 0x36, 0xe8,
	0xd7, 0x7d, 0x16, 0x10, 0xbe, 0x4b, 0x4e, 0x06, 0xd4, 0x67, 0x6a, 0xee, 0xc7, 0x59, 0xc9, 0xf4,
	0xe1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xca, 0xf6, 0x09, 0x43, 0x0d, 0x00, 0x00,
}
